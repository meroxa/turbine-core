syntax = "proto3";

package turbine_core;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

option go_package = "github.com/meroxa/turbine/core";
option java_package = "com.meroxa.turbine.proto";
option java_multiple_files = true;

service TurbineService {
  rpc Init(InitRequest) returns (google.protobuf.Empty);
  // todo consider one method parameterized with connector type
  rpc ReadFromSource(ReadFromSourceRequest) returns (RecordsCollection);
  rpc Process(ProcessRecordsRequest) returns (RecordsCollection);
  rpc WriteToDestination(WriteToDestinationRequest) returns (google.protobuf.Empty);

  // needed in CLI to know if a build is needed or not
  rpc HasFunctions(google.protobuf.Empty) returns (google.protobuf.BoolValue);

  // needed in the CLI for the deployment spec
  rpc GetSpec(GetSpecRequest) returns (GetSpecResponse);
}

message ReadFromSourceRequest {
  enum Direction {
    SOURCE = 0;
    DESTINATION = 1;
  }
  string pluginName = 1;
  Direction direction = 2;
  Configurations configuration = 3;
}

message WriteToDestinationRequest {
  string pluginName = 1;
  Configurations configuration = 2;
  RecordsCollection records = 3;
}

enum Language {
  GOLANG = 0;
  PYTHON = 1;
  JAVASCRIPT = 2;
  RUBY = 3;
  JAVA = 4;
}

message InitRequest {
  string appName = 1 [(validate.rules).string.min_len = 1];
  string configFilePath = 2 [(validate.rules).string.min_len = 1];;
  Language language = 3 [(validate.rules).enum.defined_only = true];
  string gitSHA = 4;
  string turbineVersion = 5;
}

message RecordsCollection {
  repeated Record records = 1;
  string stream = 2;
}

message Record {
  string key = 1 [(validate.rules).string.min_len = 1];;
  bytes value = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message Configurations {
  repeated Configuration configuration = 1;
}

message Configuration {
  string field = 1;
  string value = 2;
}

message ProcessRecordsRequest {
  message Process {
    string name = 1;
  }

  Process process = 1 [(validate.rules).message.required = true];
  RecordsCollection records = 2;
}

message Secret {
  string name = 1 [(validate.rules).string.min_len = 1];
  string value = 2 [(validate.rules).string.min_len = 1];
}

message GetSpecRequest {
  string image = 1;
}

message GetSpecResponse {
  bytes spec = 1;
}
