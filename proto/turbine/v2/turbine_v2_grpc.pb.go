// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: turbine/v2/turbine_v2.proto

package turbinev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TurbineService_Init_FullMethodName           = "/turbine.v2.TurbineService/Init"
	TurbineService_AddSource_FullMethodName      = "/turbine.v2.TurbineService/AddSource"
	TurbineService_ReadRecords_FullMethodName    = "/turbine.v2.TurbineService/ReadRecords"
	TurbineService_ProcessRecords_FullMethodName = "/turbine.v2.TurbineService/ProcessRecords"
	TurbineService_AddDestination_FullMethodName = "/turbine.v2.TurbineService/AddDestination"
	TurbineService_WriteRecords_FullMethodName   = "/turbine.v2.TurbineService/WriteRecords"
	TurbineService_GetSpec_FullMethodName        = "/turbine.v2.TurbineService/GetSpec"
)

// TurbineServiceClient is the client API for TurbineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TurbineServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*AddSourceResponse, error)
	ReadRecords(ctx context.Context, in *ReadRecordsRequest, opts ...grpc.CallOption) (*ReadRecordsResponse, error)
	ProcessRecords(ctx context.Context, in *ProcessRecordsRequest, opts ...grpc.CallOption) (*ProcessRecordsResponse, error)
	AddDestination(ctx context.Context, in *AddDestinationRequest, opts ...grpc.CallOption) (*AddDestinationResponse, error)
	WriteRecords(ctx context.Context, in *WriteRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSpec(ctx context.Context, in *GetSpecRequest, opts ...grpc.CallOption) (*GetSpecResponse, error)
}

type turbineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTurbineServiceClient(cc grpc.ClientConnInterface) TurbineServiceClient {
	return &turbineServiceClient{cc}
}

func (c *turbineServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TurbineService_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*AddSourceResponse, error) {
	out := new(AddSourceResponse)
	err := c.cc.Invoke(ctx, TurbineService_AddSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) ReadRecords(ctx context.Context, in *ReadRecordsRequest, opts ...grpc.CallOption) (*ReadRecordsResponse, error) {
	out := new(ReadRecordsResponse)
	err := c.cc.Invoke(ctx, TurbineService_ReadRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) ProcessRecords(ctx context.Context, in *ProcessRecordsRequest, opts ...grpc.CallOption) (*ProcessRecordsResponse, error) {
	out := new(ProcessRecordsResponse)
	err := c.cc.Invoke(ctx, TurbineService_ProcessRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) AddDestination(ctx context.Context, in *AddDestinationRequest, opts ...grpc.CallOption) (*AddDestinationResponse, error) {
	out := new(AddDestinationResponse)
	err := c.cc.Invoke(ctx, TurbineService_AddDestination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) WriteRecords(ctx context.Context, in *WriteRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TurbineService_WriteRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) GetSpec(ctx context.Context, in *GetSpecRequest, opts ...grpc.CallOption) (*GetSpecResponse, error) {
	out := new(GetSpecResponse)
	err := c.cc.Invoke(ctx, TurbineService_GetSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurbineServiceServer is the server API for TurbineService service.
// All implementations must embed UnimplementedTurbineServiceServer
// for forward compatibility
type TurbineServiceServer interface {
	Init(context.Context, *InitRequest) (*emptypb.Empty, error)
	AddSource(context.Context, *AddSourceRequest) (*AddSourceResponse, error)
	ReadRecords(context.Context, *ReadRecordsRequest) (*ReadRecordsResponse, error)
	ProcessRecords(context.Context, *ProcessRecordsRequest) (*ProcessRecordsResponse, error)
	AddDestination(context.Context, *AddDestinationRequest) (*AddDestinationResponse, error)
	WriteRecords(context.Context, *WriteRecordsRequest) (*emptypb.Empty, error)
	GetSpec(context.Context, *GetSpecRequest) (*GetSpecResponse, error)
	mustEmbedUnimplementedTurbineServiceServer()
}

// UnimplementedTurbineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTurbineServiceServer struct {
}

func (UnimplementedTurbineServiceServer) Init(context.Context, *InitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedTurbineServiceServer) AddSource(context.Context, *AddSourceRequest) (*AddSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSource not implemented")
}
func (UnimplementedTurbineServiceServer) ReadRecords(context.Context, *ReadRecordsRequest) (*ReadRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRecords not implemented")
}
func (UnimplementedTurbineServiceServer) ProcessRecords(context.Context, *ProcessRecordsRequest) (*ProcessRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRecords not implemented")
}
func (UnimplementedTurbineServiceServer) AddDestination(context.Context, *AddDestinationRequest) (*AddDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDestination not implemented")
}
func (UnimplementedTurbineServiceServer) WriteRecords(context.Context, *WriteRecordsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRecords not implemented")
}
func (UnimplementedTurbineServiceServer) GetSpec(context.Context, *GetSpecRequest) (*GetSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}
func (UnimplementedTurbineServiceServer) mustEmbedUnimplementedTurbineServiceServer() {}

// UnsafeTurbineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TurbineServiceServer will
// result in compilation errors.
type UnsafeTurbineServiceServer interface {
	mustEmbedUnimplementedTurbineServiceServer()
}

func RegisterTurbineServiceServer(s grpc.ServiceRegistrar, srv TurbineServiceServer) {
	s.RegisterService(&TurbineService_ServiceDesc, srv)
}

func _TurbineService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_AddSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).AddSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_AddSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).AddSource(ctx, req.(*AddSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_ReadRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).ReadRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_ReadRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).ReadRecords(ctx, req.(*ReadRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_ProcessRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).ProcessRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_ProcessRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).ProcessRecords(ctx, req.(*ProcessRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_AddDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).AddDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_AddDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).AddDestination(ctx, req.(*AddDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_WriteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).WriteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_WriteRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).WriteRecords(ctx, req.(*WriteRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurbineService_GetSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).GetSpec(ctx, req.(*GetSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TurbineService_ServiceDesc is the grpc.ServiceDesc for TurbineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TurbineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "turbine.v2.TurbineService",
	HandlerType: (*TurbineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _TurbineService_Init_Handler,
		},
		{
			MethodName: "AddSource",
			Handler:    _TurbineService_AddSource_Handler,
		},
		{
			MethodName: "ReadRecords",
			Handler:    _TurbineService_ReadRecords_Handler,
		},
		{
			MethodName: "ProcessRecords",
			Handler:    _TurbineService_ProcessRecords_Handler,
		},
		{
			MethodName: "AddDestination",
			Handler:    _TurbineService_AddDestination_Handler,
		},
		{
			MethodName: "WriteRecords",
			Handler:    _TurbineService_WriteRecords_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _TurbineService_GetSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "turbine/v2/turbine_v2.proto",
}
