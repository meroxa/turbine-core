// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: turbine/0.3.0/turbine.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitRequestMultiError, or
// nil if none found.
func (m *InitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppName()) < 1 {
		err := InitRequestValidationError{
			field:  "AppName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetConfigFilePath()) < 1 {
		err := InitRequestValidationError{
			field:  "ConfigFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Language_name[int32(m.GetLanguage())]; !ok {
		err := InitRequestValidationError{
			field:  "Language",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitSHA

	// no validation rules for TurbineVersion

	if len(errors) > 0 {
		return InitRequestMultiError(errors)
	}

	return nil
}

// InitRequestMultiError is an error wrapping multiple validation errors
// returned by InitRequest.ValidateAll() if the designated constraints aren't met.
type InitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitRequestMultiError) AllErrors() []error { return m }

// InitRequestValidationError is the validation error returned by
// InitRequest.Validate if the designated constraints aren't met.
type InitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitRequestValidationError) ErrorName() string { return "InitRequestValidationError" }

// Error satisfies the builtin error interface
func (e InitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitRequestValidationError{}

// Validate checks the field values on GetSourceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSourceRequestMultiError, or nil if none found.
func (m *GetSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPluginName()) < 1 {
		err := GetSourceRequestValidationError{
			field:  "PluginName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetSourceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfigs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSourceRequestValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSourceRequestValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSourceRequestValidationError{
				field:  "Configs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSourceRequestMultiError(errors)
	}

	return nil
}

// GetSourceRequestMultiError is an error wrapping multiple validation errors
// returned by GetSourceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSourceRequestMultiError) AllErrors() []error { return m }

// GetSourceRequestValidationError is the validation error returned by
// GetSourceRequest.Validate if the designated constraints aren't met.
type GetSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSourceRequestValidationError) ErrorName() string { return "GetSourceRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSourceRequestValidationError{}

// Validate checks the field values on GetDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDestinationRequestMultiError, or nil if none found.
func (m *GetDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPluginName()) < 1 {
		err := GetDestinationRequestValidationError{
			field:  "PluginName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetDestinationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfigs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDestinationRequestValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDestinationRequestValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDestinationRequestValidationError{
				field:  "Configs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDestinationRequestMultiError(errors)
	}

	return nil
}

// GetDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by GetDestinationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDestinationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDestinationRequestMultiError) AllErrors() []error { return m }

// GetDestinationRequestValidationError is the validation error returned by
// GetDestinationRequest.Validate if the designated constraints aren't met.
type GetDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDestinationRequestValidationError) ErrorName() string {
	return "GetDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDestinationRequestValidationError{}

// Validate checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Source) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SourceMultiError, or nil if none found.
func (m *Source) ValidateAll() error {
	return m.validate(true)
}

func (m *Source) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := SourceValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SourceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SourceMultiError(errors)
	}

	return nil
}

// SourceMultiError is an error wrapping multiple validation errors returned by
// Source.ValidateAll() if the designated constraints aren't met.
type SourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceMultiError) AllErrors() []error { return m }

// SourceValidationError is the validation error returned by Source.Validate if
// the designated constraints aren't met.
type SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceValidationError) ErrorName() string { return "SourceValidationError" }

// Error satisfies the builtin error interface
func (e SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceValidationError{}

// Validate checks the field values on Destination with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Destination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Destination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DestinationMultiError, or
// nil if none found.
func (m *Destination) ValidateAll() error {
	return m.validate(true)
}

func (m *Destination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DestinationValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DestinationValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCollection()) < 1 {
		err := DestinationValidationError{
			field:  "Collection",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DestinationMultiError(errors)
	}

	return nil
}

// DestinationMultiError is an error wrapping multiple validation errors
// returned by Destination.ValidateAll() if the designated constraints aren't met.
type DestinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DestinationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DestinationMultiError) AllErrors() []error { return m }

// DestinationValidationError is the validation error returned by
// Destination.Validate if the designated constraints aren't met.
type DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestinationValidationError) ErrorName() string { return "DestinationValidationError" }

// Error satisfies the builtin error interface
func (e DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestinationValidationError{}

// Validate checks the field values on Collection with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Collection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionMultiError, or
// nil if none found.
func (m *Collection) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CollectionValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Stream

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectionMultiError(errors)
	}

	return nil
}

// CollectionMultiError is an error wrapping multiple validation errors
// returned by Collection.ValidateAll() if the designated constraints aren't met.
type CollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionMultiError) AllErrors() []error { return m }

// CollectionValidationError is the validation error returned by
// Collection.Validate if the designated constraints aren't met.
type CollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionValidationError) ErrorName() string { return "CollectionValidationError" }

// Error satisfies the builtin error interface
func (e CollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := RecordValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on ReadCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadCollectionRequestMultiError, or nil if none found.
func (m *ReadCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSource() == nil {
		err := ReadCollectionRequestValidationError{
			field:  "Source",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadCollectionRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadCollectionRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCollectionRequestValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCollection()) < 1 {
		err := ReadCollectionRequestValidationError{
			field:  "Collection",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadCollectionRequestMultiError(errors)
	}

	return nil
}

// ReadCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by ReadCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadCollectionRequestMultiError) AllErrors() []error { return m }

// ReadCollectionRequestValidationError is the validation error returned by
// ReadCollectionRequest.Validate if the designated constraints aren't met.
type ReadCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCollectionRequestValidationError) ErrorName() string {
	return "ReadCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCollectionRequestValidationError{}

// Validate checks the field values on WriteCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteCollectionRequestMultiError, or nil if none found.
func (m *WriteCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDestination() == nil {
		err := WriteCollectionRequestValidationError{
			field:  "Destination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WriteCollectionRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WriteCollectionRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WriteCollectionRequestValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSourceCollection() == nil {
		err := WriteCollectionRequestValidationError{
			field:  "SourceCollection",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSourceCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WriteCollectionRequestValidationError{
					field:  "SourceCollection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WriteCollectionRequestValidationError{
					field:  "SourceCollection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WriteCollectionRequestValidationError{
				field:  "SourceCollection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WriteCollectionRequestMultiError(errors)
	}

	return nil
}

// WriteCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by WriteCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type WriteCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteCollectionRequestMultiError) AllErrors() []error { return m }

// WriteCollectionRequestValidationError is the validation error returned by
// WriteCollectionRequest.Validate if the designated constraints aren't met.
type WriteCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteCollectionRequestValidationError) ErrorName() string {
	return "WriteCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteCollectionRequestValidationError{}

// Validate checks the field values on Configs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Configs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Configs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigsMultiError, or nil if none found.
func (m *Configs) ValidateAll() error {
	return m.validate(true)
}

func (m *Configs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfig() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigsValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigsValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigsValidationError{
					field:  fmt.Sprintf("Config[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigsMultiError(errors)
	}

	return nil
}

// ConfigsMultiError is an error wrapping multiple validation errors returned
// by Configs.ValidateAll() if the designated constraints aren't met.
type ConfigsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigsMultiError) AllErrors() []error { return m }

// ConfigsValidationError is the validation error returned by Configs.Validate
// if the designated constraints aren't met.
type ConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigsValidationError) ErrorName() string { return "ConfigsValidationError" }

// Error satisfies the builtin error interface
func (e ConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigsValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Value

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on ProcessCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessCollectionRequestMultiError, or nil if none found.
func (m *ProcessCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProcess() == nil {
		err := ProcessCollectionRequestValidationError{
			field:  "Process",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessCollectionRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessCollectionRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessCollectionRequestValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCollection() == nil {
		err := ProcessCollectionRequestValidationError{
			field:  "Collection",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessCollectionRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessCollectionRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessCollectionRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessCollectionRequestMultiError(errors)
	}

	return nil
}

// ProcessCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessCollectionRequestMultiError) AllErrors() []error { return m }

// ProcessCollectionRequestValidationError is the validation error returned by
// ProcessCollectionRequest.Validate if the designated constraints aren't met.
type ProcessCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessCollectionRequestValidationError) ErrorName() string {
	return "ProcessCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessCollectionRequestValidationError{}

// Validate checks the field values on GetSpecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSpecRequestMultiError,
// or nil if none found.
func (m *GetSpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if len(errors) > 0 {
		return GetSpecRequestMultiError(errors)
	}

	return nil
}

// GetSpecRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpecRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecRequestMultiError) AllErrors() []error { return m }

// GetSpecRequestValidationError is the validation error returned by
// GetSpecRequest.Validate if the designated constraints aren't met.
type GetSpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecRequestValidationError) ErrorName() string { return "GetSpecRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecRequestValidationError{}

// Validate checks the field values on GetSpecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecResponseMultiError, or nil if none found.
func (m *GetSpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Spec

	if len(errors) > 0 {
		return GetSpecResponseMultiError(errors)
	}

	return nil
}

// GetSpecResponseMultiError is an error wrapping multiple validation errors
// returned by GetSpecResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecResponseMultiError) AllErrors() []error { return m }

// GetSpecResponseValidationError is the validation error returned by
// GetSpecResponse.Validate if the designated constraints aren't met.
type GetSpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecResponseValidationError) ErrorName() string { return "GetSpecResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecResponseValidationError{}

// Validate checks the field values on ProcessCollectionRequest_Process with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProcessCollectionRequest_Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessCollectionRequest_Process with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProcessCollectionRequest_ProcessMultiError, or nil if none found.
func (m *ProcessCollectionRequest_Process) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessCollectionRequest_Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ProcessCollectionRequest_ProcessMultiError(errors)
	}

	return nil
}

// ProcessCollectionRequest_ProcessMultiError is an error wrapping multiple
// validation errors returned by
// ProcessCollectionRequest_Process.ValidateAll() if the designated
// constraints aren't met.
type ProcessCollectionRequest_ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessCollectionRequest_ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessCollectionRequest_ProcessMultiError) AllErrors() []error { return m }

// ProcessCollectionRequest_ProcessValidationError is the validation error
// returned by ProcessCollectionRequest_Process.Validate if the designated
// constraints aren't met.
type ProcessCollectionRequest_ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessCollectionRequest_ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessCollectionRequest_ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessCollectionRequest_ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessCollectionRequest_ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessCollectionRequest_ProcessValidationError) ErrorName() string {
	return "ProcessCollectionRequest_ProcessValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessCollectionRequest_ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessCollectionRequest_Process.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessCollectionRequest_ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessCollectionRequest_ProcessValidationError{}
